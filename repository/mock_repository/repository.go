// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eran-levy/tokenizer-gophercon/repository (interfaces: Persistence)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "github.com/eran-levy/tokenizer-gophercon/repository/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPersistence is a mock of Persistence interface
type MockPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceMockRecorder
}

// MockPersistenceMockRecorder is the mock recorder for MockPersistence
type MockPersistenceMockRecorder struct {
	mock *MockPersistence
}

// NewMockPersistence creates a new mock instance
func NewMockPersistence(ctrl *gomock.Controller) *MockPersistence {
	mock := &MockPersistence{ctrl: ctrl}
	mock.recorder = &MockPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersistence) EXPECT() *MockPersistenceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockPersistence) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPersistenceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPersistence)(nil).Close))
}

// IsServiceHealthy mocks base method
func (m *MockPersistence) IsServiceHealthy(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceHealthy", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceHealthy indicates an expected call of IsServiceHealthy
func (mr *MockPersistenceMockRecorder) IsServiceHealthy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceHealthy", reflect.TypeOf((*MockPersistence)(nil).IsServiceHealthy), arg0)
}

// StoreMetadata mocks base method
func (m *MockPersistence) StoreMetadata(arg0 context.Context, arg1 model.TokenizeTextMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetadata indicates an expected call of StoreMetadata
func (mr *MockPersistenceMockRecorder) StoreMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetadata", reflect.TypeOf((*MockPersistence)(nil).StoreMetadata), arg0, arg1)
}
